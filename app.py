import streamlit as st
import pandas as pd
from io import BytesIO

# --- 1. ุฅุนุฏุงุฏ ุงูุตูุญุฉ ูุงูุชุทุจูู ---
st.set_page_config(
    page_title="Attendance Data Analyzer",
    layout="wide",
    initial_sidebar_state="expanded"
)

st.title("Attendance Data Analyzer (Check-In/Check-Out) ๐")
st.markdown("ูุฑุฌู ุฑูุน ููู ุงูุจุตูุงุช ุงููุตู (`.txt`) ุจุงูุตูุบุฉ ุงููุญุฏุฏุฉ ูุชุญูููู ุฅูู ุฌุฏูู ุญุถูุฑ ูุงูุตุฑุงู.")

# --- 2. ุนูุตุฑ ุฑูุน ุงูููู (Uploader) ---
uploaded_file = st.file_uploader(
    "ุงุฑูุน ููู ุงูุจุตูุงุช (ุจุตูู 222.txt ุฃู ุฃู ููู ุจููุณ ุงูุชูุณูู)",
    type=["txt"]
)

if uploaded_file is not None:
    try:
        # --- 3. ูุฑุงุกุฉ ุงูุจูุงูุงุช ุงูุฃูููุฉ ูุงููุนุงูุฌุฉ (Data Preprocessing) ---
        
        # ูุฑุงุกุฉ ุงูููู ููุธููุฉ
        data = uploaded_file.getvalue().decode("utf-8")
        
        # ุชูุณูู ุงูุจูุงูุงุช ุฅูู ุณุฌูุงุช ุฃูููุฉ
        raw_lines = data.strip().split('\n')
        processed_lines = []
        
        COMPANY_PREFIX = "This Company"
        
        for line in raw_lines:
            # ุชูุธูู ุงููุณุงูุงุช ุงููุชุนุฏุฏุฉ ูุงุณุชุจุฏุงููุง ุจูุณุงูุฉ ูุงุญุฏุฉ
            cleaned_line = ' '.join(line.strip().split())
            
            if not cleaned_line.startswith(COMPANY_PREFIX):
                continue
                
            # ุฅุฒุงูุฉ ุจุงุฏุฆุฉ ุงุณู ุงูุดุฑูุฉ ูุงููุณุงูุงุช ุงูุฒุงุฆุฏุฉ
            content = cleaned_line[len(COMPANY_PREFIX):].strip()
            
            # ุชูุณูู ุงููุญุชูู ุงููุชุจูู ุฅูู ุฃุฌุฒุงุก
            parts = content.split()
            
            # ูุชููุน 6 ุญููู ุซุงุจุชุฉ ูู ุงูููุงูุฉ:
            # [ID, Date_Part, Time_HH:MM:SS, Time_AM/PM, Constant_2, Constant_FP]
            # ูุซุงู: 41 9/1/2025 10:10:37 AM 2 FP
            # ูุญุชุงุฌ ุงูุฃุฌุฒุงุก ุงูุณุชุฉ ุงูุฃุฎูุฑุฉ (index -6 ุฅูู -1)
            
            if len(parts) >= 6: 
                # ุงุณุชุฎุฑุงุฌ ุงูุฃุฌุฒุงุก ุงูุซุงุจุชุฉ ูู ุงูููุงูุฉ
                constant_fp = parts[-1] 
                constant_2 = parts[-2]
                time_ampm = parts[-3]
                time_seconds = parts[-4]
                date_part = parts[-5]
                employee_id = parts[-6]
                
                # ุชุฌููุน ุณูุณูุฉ ุงูุชุงุฑูุฎ ูุงูููุช
                date_time_str = f"{date_part} {time_seconds} {time_ampm}"
                
                # ุงุณุชุฎุฑุงุฌ ุงุณู ุงูููุธู: ูู ูุง ุชุจูู ูุจู ุงูุฌุฒุก ุงูุณุงุฏุณ ูู ุงูููุงูุฉ
                employee_name = ' '.join(parts[:-6]).strip()
                
                # ุงูุชุฃูุฏ ูู ุนุฏู ูุฌูุฏ ุจูุงูุงุช ููุฑุฑุฉ (ูุธุฑุงู ูุฃู ุงูุณุทุฑ ูุฏ ููุชุฏ)
                if employee_name and employee_id.isdigit():
                    processed_lines.append({
                        'Employee Name': employee_name,
                        'ID': employee_id,
                        'DateTime String': date_time_str
                    })
        
        # ูู ุญุงูุฉ ุนุฏู ูุฌูุฏ ุฃู ุณุฌูุงุช ุตุงูุญุฉ
        if not processed_lines:
            st.error("ูู ูุชู ุงูุนุซูุฑ ุนูู ุณุฌูุงุช ุจุตูุงุช ุตุงูุญุฉ ูู ุงูููู ุงููุฑููุน. ุชุฃูุฏ ูู ุชุทุงุจู ุงูุชูุณูู.")
            st.stop()
            
        # ุฅูุดุงุก DataFrame
        df = pd.DataFrame(processed_lines)
        
        # ุชุญููู ุนููุฏ ุงูุชุงุฑูุฎ ูุงูููุช ุฅูู ุชูุณูู datetime
        # ูุณุชุฎุฏู format='%m/%d/%Y %I:%M:%S %p' ูุฃู ุงูุชูุณูู ูุงุถุญ (ุดูุฑ/ููู/ุณูุฉ ุณุงุนุฉ:ุฏูููุฉ:ุซุงููุฉ ุตุจุงุญุงู/ูุณุงุกู)
        df['DateTime'] = pd.to_datetime(df['DateTime String'], format='%m/%d/%Y %I:%M:%S %p', errors='coerce')
        df['Date'] = df['DateTime'].dt.date
        
        # ุงูุชุฃูุฏ ูู ุฃู ุงูู ID ุฑููู
        df['ID'] = pd.to_numeric(df['ID'], errors='coerce', downcast='integer')
        
        # ุฅุฒุงูุฉ ุฃู ุณุฌูุงุช ูู ูุชููู Pandas ูู ุชุญููู ุงูุชุงุฑูุฎ ุฃู ุงูู ID ูููุง
        df.dropna(subset=['DateTime', 'ID'], inplace=True)
        
        st.success(f"ุชูุช ูุฑุงุกุฉ ูุชุญููู **{len(df)}** ุจุตูุฉ ุจูุฌุงุญ ูู **{df['ID'].nunique()}** ููุธู.")
        
        # --- 4. ุชุทุจูู ููุทู ุงูุญุถูุฑ ูุงูุงูุตุฑุงู (Grouping & Logic) ---
        
        # ูุฑุฒ ุงูุจูุงูุงุช ูุถูุงู ุฃู ุฃูู ุจุตูุฉ ูู Check-In ูุขุฎุฑ ุจุตูุฉ ูู Check-Out
        df.sort_values(by=['ID', 'Date', 'DateTime'], inplace=True)
        
        # ุชุฌููุน ุงูุจูุงูุงุช ุญุณุจ ุงูููุธู ูุงูููู
        attendance_summary = df.groupby(['ID', 'Employee Name', 'Date']).agg(
            first_in=('DateTime', 'first'),
            last_out=('DateTime', 'last'),
            count=('DateTime', 'size')
        ).reset_index()

        # ุฏุงูุฉ ุชุทุจูู ููุทู ุงูุจุตูุฉ ุงููุงุญุฏุฉ
        def apply_single_punch_logic(row):
            if row['count'] == 1:
                # ุฅูุดุงุก ููุทุฉ ูุฑุฌุนูุฉ 2:00 PM ูููุณ ุงูููู (14:00:00)
                # ูุณุชุฎุฏู ุงูุชุงุฑูุฎ ูู ุงูุณุฌู ููุญุฏุฏ ุงูุณุงุนุฉ 14:00:00
                ref_time = pd.Timestamp(row['Date']).replace(hour=14, minute=0, second=0)
                
                # ุงุณุชุฎุฏุงู ูููุฉ first_in ููููุงุฑูุฉ
                if row['first_in'] <= ref_time:
                    # ุจุตูุฉ ูุจู ุฃู ุนูุฏ 2:00 PM: ุชูุนุชุจุฑ Check-In
                    return pd.Series([row['first_in'].time(), 'No Logout'])
                else:
                    # ุจุตูุฉ ุจุนุฏ 2:00 PM: ุชูุนุชุจุฑ Check-Out
                    return pd.Series(['No Login', row['first_in'].time()])
            else:
                # ูู ุญุงูุฉ ูุฌูุฏ ุจุตูุชูู ุฃู ุฃูุซุฑ (ุฃูู ุจุตูุฉ ูุขุฎุฑ ุจุตูุฉ)
                return pd.Series([row['first_in'].time(), row['last_out'].time()])

        # ุชุทุจูู ุงูุฏุงูุฉ ุนูู ุงูููุฎุต ูุชุนููู ุงูููู ููุฃุนูุฏุฉ
        # ุชู ุฅุตูุงุญ ุงูุฎุทุฃ: ุงูุขู pd.Series ุชูุฑุฌุน ูููุชูู ุฏุงุฆูุงู
        attendance_summary[['Check-In', 'Check-Out']] = attendance_summary.apply(
            apply_single_punch_logic, axis=1
        )

        # --- 5. ุชุฌููุฒ DataFrame ุงูููุงุฆู ูููู Excel ---
        final_df = attendance_summary[['ID', 'Employee Name', 'Date', 'Check-In', 'Check-Out']]
        
        # ูุฑุฒ ููุงุฆู ุญุณุจ ุงูู ID ูุงูุชุงุฑูุฎ
        final_df.sort_values(by=['ID', 'Date'], inplace=True)

        st.subheader("๐ ุฌุฏูู ุงูุญุถูุฑ ูุงูุงูุตุฑุงู ุงููุนุงูุฌ")
        st.dataframe(final_df, use_container_width=True)

        # --- 6. ุนูุตุฑ ุชูุฒูู ุงูููู (Downloader) ---
        
        # ุชุญููู DataFrame ุฅูู Excel ูู ุงูุฐุงูุฑุฉ
        output = BytesIO()
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            final_df.to_excel(writer, index=False, sheet_name='Attendance_Summary')
        processed_data = output.getvalue()

        st.download_button(
            label="ุชูุฒูู ููู Excel ๐ฅ",
            data=processed_data,
            file_name="Processed_Attendance_Summary.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )

    except Exception as e:
        st.error(f"ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ูุนุงูุฌุฉ ุงููููุ ุฑุจูุง ุจุณุจุจ ุชูุณูู ุบูุฑ ูุชููุน ูู ุจุนุถ ุงูุณุฌูุงุช: {e}")
        # st.exception(e) # ููููู ุฅุฒุงูุฉ ุนูุงูุฉ ุงูุชุนููู ูุฑุคูุฉ ุงูู Traceback
